<snippet>
    <content><![CDATA[
use std::net::{SocketAddrV4, Ipv4Addr, TcpListener};
use std::io::Read;

fn run() -> Result<()> {
    let loopback = Ipv4Addr::new(127, 0, 0, 1);
    // Assigning port 0 requests the OS to assign a free port
    let socket = SocketAddrV4::new(loopback, 0);
    let listener = TcpListener::bind(socket)?;
    let port = listener.local_addr()?;
    println!("Listening on {}, access this port to end the program", port);
    let (mut tcp_stream, addr) = listener.accept()?; //block  until requested
    println!("Connection received! {:?} is sending data.", addr);
    let mut input = String::new();
    // read from the socket until connection closed by client, discard byte count.
    let _ = tcp_stream.read_to_string(&mut input)?;
    println!("{:?} says {}", addr, input);
    Ok(())
}
]]></content>
    <tabTrigger>listen-on-free-port</tabTrigger>
    <scope>source.rust</scope>
    <description>Listen on unused port TCP/IP</description>
</snippet>
