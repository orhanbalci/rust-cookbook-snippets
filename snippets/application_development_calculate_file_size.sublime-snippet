<snippet>
    <content><![CDATA[
extern crate walkdir;

use walkdir::WalkDir;

fn main() {
    let total_size = WalkDir::new(".")
        .min_depth(1)
        .max_depth(3)
        .into_iter()
        .filter_map(|entry| entry.ok()) // Files, we have access to
        .filter_map(|entry| entry.metadata().ok()) // Get metadata
        .filter(|metadata| metadata.is_file()) // Filter out directories
        .fold(0, |acc, m| acc + m.len()); // Accumulate sizes

    println!("Total size: {} bytes.", total_size);
}
]]></content>
    <tabTrigger>file-size-recursive</tabTrigger>
    <scope>source.rust</scope>
    <description>Recursively calculate file sizes at given depth</description>
</snippet>
